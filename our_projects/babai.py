#!/usr/lib/sagemath/sage -python
import sys
from sage.all import *

"""
Babai algorithm for solving Closest Vector Problem-CVP

 AUTHORS:

 K.Draziotis (26-5-2014): initial version

 TESTS:


 REFERENCES:
 
"""

#*****************************************************************************
#       Copyright (C) 2014 K.Draziotis <drazioti@gmail.com>
#
#  Distributed under the terms of the GNU General Public License (GPL)
#  as published by the Free Software Foundation; either version 2 of
#  the License, or (at your option) any later version.
#                  http://www.gnu.org/licenses/
#*****************************************************************************

if len(sys.argv) != 3:
    print "Usage: %s <matrix> <targer vector>"%sys.argv[0];
    print "Outputs the closest vector to target_vector of the lattice generated by the rows of M, using Babai's algorithm."
    sys.exit(1)
M3=matrix(sage_eval(sys.argv[1]));
msg=int(M3.nrows());
row=msg;
w=vector([0 for i in range(0,msg+1)]);
r=[];
L=[];
Y=[];
babai=[];
target=vector(sage_eval(sys.argv[2]));
##########
#  First step. We reduce the rowspace of A with LLL and delta = 3/4
##########
AA=M3.LLL(delta=0.75,algorithm='NTL:LLL');
##########
#  Second step. Apply Babai to the reduced basis
##########
GM=AA.gram_schmidt()[0];
w=target
j=0;
i=0;
for j in range(row):
    i=row-j-1
    a=w.dot_product((GM[i]));
    bb=vector(GM[i]).dot_product(GM[i]);
    L=a/bb;
    Y.append(floor(L+.5)*AA.row(i));
    w=w-(L-floor(L+.5))*GM[i]-floor(L+.5)*AA.row(i);
babai=sum(Y);
print(babai);
sum(Integer((babai[i]-target[i]))^2 for i in range(msg));

